{"version":3,"file":"static/js/186.0594c881.chunk.js","mappings":"8MAiCA,UA9BgB,SAAC,GAAe,IACxBA,EADuB,EAAZC,MACKC,OAAOF,QAC7B,GAA8BG,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,8GAEMC,EAAAA,EAAAA,IAAgBR,GAFtB,OAEXS,EAFW,OAGjBJ,EAAWI,EAASC,SAHH,gDAKjBC,QAAQC,IAAI,gCAAZ,MALiB,yDAAH,qDASlBL,GACD,GAAE,CAACP,KAGF,4BACE,oCACCI,EAAQS,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,4BACE,wBAAKD,KACL,uBAAIC,MAFIF,EADC,MAQlB,C,wMC7BKG,EAAU,mCACVC,EAAW,+BAEXC,EAAG,mCAAG,WAAOC,GAAP,gGAAYlB,EAAZ,+BAAqB,CAAC,EAAtB,kBAEemB,EAAAA,EAAAA,IAAUD,EAAK,CAAElB,QAAO,kBAAMA,GAAP,IAAeoB,QAASL,MAF9D,cAEFR,EAFE,yBAGDA,EAASc,MAHR,sCAKF,IAAIC,OAAM,eAAMf,gBAAN,mBAAgBc,YAAhB,eAAsBE,iBAAkB,wBALhD,yDAAH,sDASHC,EAAe,SAACC,GAAuB,IAAjBzB,EAAgB,uDAAP,CAAC,EAC9B0B,EAAc,IAAIC,iBAAJ,kBAAyB3B,GAAzB,IAAiCoB,QAASL,KAC9D,MAAM,GAAN,OAAUC,GAAV,OAAqBS,EAArB,YAA6BC,EAC9B,EAEYE,EAAoB,kBAAMX,EAAIO,EAAa,uBAAvB,EAEpBK,EAAe,SAAAC,GAE1B,OAAOb,EAAIO,EAAa,gBADT,CAAEM,MAAAA,IAElB,EAEYC,EAAkB,SAAAjC,GAAO,OAAImB,EAAIO,EAAa,UAAD,OAAW1B,IAA/B,EAEzBkC,EAAkB,SAAAlC,GAAO,OAAImB,EAAIO,EAAa,UAAD,OAAW1B,EAAX,aAApB,EAEzBQ,EAAkB,SAAAR,GAAO,OAAImB,EAAIO,EAAa,UAAD,OAAW1B,EAAX,aAApB,C","sources":["components/Reviews/Reviews.jsx","services/Api.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { getMovieReviews } from 'services/Api';\n\nconst Reviews = ({ match }) => {\n  const movieId = match.params.movieId;\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      try {\n        const response = await getMovieReviews(movieId);\n        setReviews(response.results);\n      } catch (error) {\n        console.log('Error fetching movie reviews:', error);\n      }\n    };\n\n    fetchReviews();\n  }, [movieId]);\n\n  return (\n    <div>\n      <h2>Reviews</h2>\n      {reviews.map(({ id, author, content }) => (\n        <div key={id}>\n          <h4>{author}</h4>\n          <p>{content}</p>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst API_KEY = '5f1e3b1759fab00680a52c6138151c80';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nconst get = async (url, params = {}) => {\n  try {\n    const response = await axios.get(url, { params: { ...params, api_key: API_KEY } });\n    return response.data;\n  } catch (error) {\n    throw new Error(error.response?.data?.status_message || 'Something went wrong');\n  }\n};\n\nconst createApiUrl = (path, params = {}) => {\n  const queryParams = new URLSearchParams({ ...params, api_key: API_KEY });\n  return `${BASE_URL}${path}?${queryParams}`;\n};\n\nexport const getTrendingMovies = () => get(createApiUrl('/trending/movie/day'));\n\nexport const searchMovies = query => {\n  const params = { query };\n  return get(createApiUrl('/search/movie', params));\n};\n\nexport const getMovieDetails = movieId => get(createApiUrl(`/movie/${movieId}`));\n\nexport const getMovieCredits = movieId => get(createApiUrl(`/movie/${movieId}/credits`));\n\nexport const getMovieReviews = movieId => get(createApiUrl(`/movie/${movieId}/reviews`));\n"],"names":["movieId","match","params","useState","reviews","setReviews","useEffect","fetchReviews","getMovieReviews","response","results","console","log","map","id","author","content","API_KEY","BASE_URL","get","url","axios","api_key","data","Error","status_message","createApiUrl","path","queryParams","URLSearchParams","getTrendingMovies","searchMovies","query","getMovieDetails","getMovieCredits"],"sourceRoot":""}